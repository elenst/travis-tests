language: cpp
dist: trusty
compiler: gcc
sudo: enabled

cache:
  apt: true
  directories:
    - $HOME/server

addons:
  apt:
    packages:
      - libaio1
      - libaio-dev
      - libjemalloc1
      - gdb
      - libnuma1
      - libdbd-mysql-perl

env:

  global:

    #### Notes:
    # - SERVER_BRANCH and RQG_BRANCH can be redefined in travis settings, currently only globally (for all branches),
    #   by SERVER_BRANCH_OVERRIDE and RQG_BRANCH_OVERRIDE correspondingly.
    # - if RQG_BRANCH_OVERRIDE and RQG_BRANCH are not defined, a default one chosen by the cloning script will be used.
    # - export RERUN_OLD_SERVER=yes if tests should be run always, regardless whether they were run on the same revision or not,
    #   otherwise keep commented
    # - -export REBUILD_OLD_SERVER=yes if the build needs to be done even if there is cached one (rarely needed),
    #   otherwise keep commented

    - export SERVER_BRANCH=10.0
    - export RERUN_OLD_SERVER=no
    #- export RQG_BRANCH=elenst-dev
    #- export REBUILD_OLD_SERVER=yes

    - export GLOBAL_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug -DWITH_SPHINX_STORAGE_ENGINE=OFF -DWITH_TOKUDB_STORAGE_ENGINE=OFF -DWITH_MROONGA_STORAGE_ENGINE=OFF -DWITH_FEDERATED_STORAGE_ENGINE=OFF -DWITH_FEDERATEDX_STORAGE_ENGINE=OFF -DWITH_CONNECT_STORAGE_ENGINE=OFF -DWITH_SPIDER_STORAGE_ENGINE=OFF -DWITHOUT_SPHINX_STORAGE_ENGINE=ON -DWITHOUT_TOKUDB_STORAGE_ENGINE=ON -DWITHOUT_MROONGA_STORAGE_ENGINE=ON -DWITHOUT_FEDERATED_STORAGE_ENGINE=ON -DWITHOUT_FEDERATEDX_STORAGE_ENGINE=ON -DWITHOUT_CONNECT_STORAGE_ENGINE=ON -DWITHOUT_SPIDER_STORAGE_ENGINE=ON"

  matrix:

  - TYPE=recovery,undo-recovery               PAGE_SIZE=small
  - TYPE=normal,crash           OLD=10.0      PAGE_SIZE=small
  - TYPE=undo                   OLD=10.0      PAGE_SIZE=small

install:

  - export TOOLBOX_DIR=$HOME/mariadb-toolbox
  - if [ -n "$TOOLBOX_BRANCH" ] ; then TOOLBOX_BRANCH="--branch $TOOLBOX_BRANCH" ; fi
  - git clone https://github.com/elenst/mariadb-toolbox --depth=1 $TOOLBOX_BRANCH $TOOLBOX_DIR
  - . $TOOLBOX_DIR/travis/export_and_clone.sh
  - . $SCRIPT_DIR/build_if_not_cached.sh

  - . $SCRIPT_DIR/get_old_version.sh $OLD

before_script:
  - . $SCRIPT_DIR/collect_system_info.sh
  - . $SCRIPT_DIR/heartbeat.sh &

script:

  # Dry run will just create a list of combinations, then piped works will re-format it into proper command lines, and run.sh will run them
  - cd $RQG_HOME
  - perl $RQG_HOME/combinations.pl --new --config=$SCRIPT_DIR/travis_combinations.cc --run-all-combinations-once --force --workdir=$LOGDIR --dry-run | grep perl | sed -e 's/.*\(perl .*\)/\1/g' | perl -e '$num=0; while(<>) {$num++; print; print "\nTRIAL=$num TRIAL_LOG=$ENV{LOGDIR}/trial${num}.log VARDIR=$ENV{LOGDIR}/current1_1 . $ENV{SCRIPT_DIR}/collect_single_failure_info.sh\n\n";}' > $HOME/run.sh
  - . $HOME/run.sh

  - cd $HOME
  #- perl $TRAVIS_BUILD_DIR/scripts/parse_upgrade_logs.pl --mode=jira --nowarnings $LOGDIR/trial*
  - perl $SCRIPT_DIR/parse_upgrade_logs.pl --mode=kb --nowarnings $LOGDIR/trial*
  - perl $SCRIPT_DIR/parse_upgrade_logs.pl --mode=text --nowarnings $LOGDIR/trial*

before_cache:
  - rm -rf $HOME/server/mysql-test
  - if [ ! -e $HOME/server/test_result ] ; then echo $TRAVIS_TEST_RESULT > $HOME/server/test_result; fi
