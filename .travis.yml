language: cpp
dist: trusty
compiler: gcc
sudo: enabled

cache:
  apt: true
  directories:
    - $HOME/server

before_cache:
  rm -rf $HOME/server/mysql-test

addons:
  apt:
    packages:
      - libaio1
      - libaio-dev
      - libjemalloc1
      - gdb
      - libnuma1
      - libdbd-mysql-perl

env:
- TYPE=recovery,undo-recovery               PAGE_SIZE=small
- TYPE=normal,crash           OLD=10.0      PAGE_SIZE=small
- TYPE=undo                   OLD=10.0      PAGE_SIZE=small

install:

#### Notes:
# - TEST_BRANCH (a.k.a RQG branch) can be redefined in travis settings, currently only globally (for all branches)
# - SERVER_BRANCH can be redefined in  in travis settings, currently only globally (for all branches)
# - export RERUN_OLD_SERVER=yes if tests should be run always, regardless whether they were run on the same revision or not

#### Settings generally unique per branch
- SERVER="${SERVER_BRANCH:-10.0}"
- TEST_BRANCH="${TEST_BRANCH:-travis-workarounds}"
- export CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug -DWITH_SPHINX_STORAGE_ENGINE=OFF -DWITH_TOKUDB_STORAGE_ENGINE=OFF -DWITH_MROONGA_STORAGE_ENGINE=OFF -DWITH_FEDERATED_STORAGE_ENGINE=OFF -DWITH_FEDERATEDX_STORAGE_ENGINE=OFF -DWITH_CONNECT_STORAGE_ENGINE=OFF -DWITH_SPIDER_STORAGE_ENGINE=OFF -DWITHOUT_SPHINX_STORAGE_ENGINE=ON -DWITHOUT_TOKUDB_STORAGE_ENGINE=ON -DWITHOUT_MROONGA_STORAGE_ENGINE=ON -DWITHOUT_FEDERATED_STORAGE_ENGINE=ON -DWITHOUT_FEDERATEDX_STORAGE_ENGINE=ON -DWITHOUT_CONNECT_STORAGE_ENGINE=ON -DWITHOUT_SPIDER_STORAGE_ENGINE=ON"

#### Settings and actions common for all test branches
- export BASEDIR=$HOME/server
- export RQG_HOME=$HOME/rqg
- export SCRIPT_DIR=$HOME/mariadb-tests/scripts

- cd $HOME
- git clone https://github.com/MariaDB/server --depth=1 --branch $SERVER src
- git clone https://github.com/elenst/mariadb-tests mariadb-tests
- git clone https://github.com/elenst/rqg --branch $TEST_BRANCH rqg
- cd $RQG_HOME
- export TEST_REVISION=`git log -1 --pretty="%H"`
- cd $SCRIPT_DIR && git log -1
- export LOGDIR=$HOME/logs

#### Settings and actions common for this type of tests
- . $SCRIPT_DIR/get_old_version.sh $OLD
- . $SCRIPT_DIR/build_if_not_cached.sh


script:

# Dry run will just create a list of combinations, then piped works will re-format it into proper command lines, and run.sh will run them
- cd $RQG_HOME
- perl $RQG_HOME/combinations.pl --new --config=$SCRIPT_DIR/travis_combinations.cc --run-all-combinations-once --force --workdir=$LOGDIR --dry-run | grep perl | sed -e 's/.*\(perl .*\)/\1/g' | perl -e '$num=0; while(<>) {$num++; print; print "\nTRIAL=$num TRIAL_LOG=$ENV{LOGDIR}/trial${num}.log VARDIR=$ENV{LOGDIR}/current1_1 . $ENV{SCRIPT_DIR}/collect_single_failure_info.sh\n\n";}' > $HOME/run.sh
- . $HOME/run.sh

- cd $HOME
#- perl $TRAVIS_BUILD_DIR/scripts/parse_upgrade_logs.pl --mode=jira --nowarnings $LOGDIR/trial*
- perl $SCRIPT_DIR/parse_upgrade_logs.pl --mode=kb --nowarnings $LOGDIR/trial*
- perl $SCRIPT_DIR/parse_upgrade_logs.pl --mode=text --nowarnings $LOGDIR/trial*
- if [ ! -e $BASEDIR/test_result ] ; then echo $? > $BASEDIR/test_result ; fi
