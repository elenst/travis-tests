variables:

  # Branches
  SERVER_BRANCH: 10.4
  RQG_BRANCH: elenst-dev
  TOOLBOX_BRANCH: master

  # Locations
  TOOLBOX_DIR: $(HOME)/mariadb-toolbox
  RQG_HOME: $(HOME)/rqg
  SCRIPT_DIR: $(TOOLBOX_DIR)/travis
  BASEDIR: $(HOME)/server
  LOGDIR: $(HOME)/logs
  SRCDIR: $(HOME)/src

  # Global build options
  GLOBAL_CMAKE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_SPHINX=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DPLUGIN_ROCKSDB=NO -DWITH_MARIABACKUP=OFF"

  # Global test options
  TEST_DURATION: 400
  GLOBAL_RQG_OPTIONS: "--duration=$(TEST_DURATION) --threads=6 --seed=time --reporters=Backtrace,ErrorLog,Deadlock --views --redefine=conf/mariadb/alter_table.yy --redefine=conf/mariadb/instant_add.yy --redefine=conf/mariadb/modules/alter_table_columns.yy --redefine=conf/mariadb/sp.yy --redefine=conf/mariadb/bulk_insert.yy  --redefine=conf/mariadb/modules/admin.yy --redefine=conf/mariadb/modules/userstat.yy --redefine=conf/mariadb/modules/foreign_keys.yy -redefine=conf/mariadb/modules/locks.yy --redefine=conf/mariadb/modules/sql_mode.yy --redefine=conf/mariadb/modules/acl.yy --redefine=conf/mariadb/versioning.yy --redefine=conf/mariadb/sequences.yy --redefine=conf/mariadb/modules/locks-10.4-extra.yy --filter=$(SCRIPT_DIR)/10.4-combo-filter.ff"
  GLOBAL_MYSQLD_OPTIONS: "--mysqld=--log_output=FILE --mysqld=--max-statement-time=30 --mysqld=--lock-wait-timeout=10 --mysqld=--loose-innodb-lock-wait-timeout=5 --mysqld=--loose-debug_assert_on_not_freed_memory=0"
  
  # Initialize JOB options (in case we forget to do it later)
  JOB_CMAKE_OPTIONS: ""
  JOB_RQG_OPTIONS: ""
  JOB_MYSQLD_OPTIONS: ""

jobs:

#########
- job: Prepare_server
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    parallel: 1

  # Libraries needed to build the server
  steps:
  - script: |
      set -x
      sudo apt-get update
      sudo apt-get install -y -q \
        apt-utils build-essential cmake python-dev sudo git \
        devscripts equivs libcurl4-openssl-dev \
        ccache python3 python3-pip curl libssl-dev libzstd-dev \
        libevent-dev dpatch gawk gdb libboost-dev libcrack2-dev \
        libjudy-dev libnuma-dev libsnappy-dev libxml2-dev \
        unixodbc-dev uuid-dev fakeroot iputils-ping \
        libncurses5-dev libbison-dev
    displayName: 'Install packages for build'
      
  # Clone and build server
  - script: |
      set -x
      git clone "https://github.com/MariaDB/server" --depth=1 --branch=$(SERVER_BRANCH) $(SRCDIR)
      mkdir $(BASEDIR)
      mkdir $(HOME)/out-of-source
      cd $(HOME)/out-of-source
      cmake $(SRCDIR) $(GLOBAL_CMAKE_OPTIONS) $(JOB_CMAKE_OPTIONS) -DCMAKE_INSTALL_PREFIX=$(BASEDIR)
      make -j4
      make install
      cd $(SRCDIR)
      echo $(SERVER_BRANCH) `git log -1 --pretty="%h"` > $(BASEDIR)/server.version
    displayName: 'Build server'

  # Archive and store built binaries
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(BASEDIR)
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/build.tar.gz
    displayName: 'Archive build'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: 'build'
    displayName: 'Store build'


#########
- job: Publish_binaries
  dependsOn: Prepare_server
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Download build'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'build' 
    displayName: 'Upload build'

#########
- job: Test
  dependsOn: Prepare_server
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      'metadata_stability-InnoDB':
        GRAMMAR: 'conf/runtime/metadata_stability.yy'
        JOB_RQG_OPTIONS: "--gendata=conf/runtime/metadata_stability.zz"
        JOB_MYSQLD_OPTIONS: ""
      'performance_schema':
        GRAMMAR: 'conf/runtime/performance_schema.yy'
        JOB_RQG_OPTIONS: ""
        JOB_MYSQLD_OPTIONS: "--mysqld=--performance-schema"
      'information_schema':
        GRAMMAR: 'conf/runtime/information_schema.yy'
        JOB_RQG_OPTIONS: ""
        JOB_MYSQLD_OPTIONS: ""

  steps:

  # Restore pre-built binaries
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Download build'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/build.tar.gz'
      destinationFolder: $(BASEDIR)
    displayName: 'Extract build'

  - script: |
      set -x
      sudo apt-get update
      sudo apt-get install -y -q libdbi-perl libdbd-mysql-perl libsnappy1v5
    displayName: 'Install runtime packages'

  - script: |
      set -x
      echo "Agent.JobName: " $(Agent.JobName)
      git clone "https://github.com/elenst/mariadb-toolbox" --depth=1 --branch=$(TOOLBOX_BRANCH) $(TOOLBOX_DIR)
      git clone "https://github.com/MariaDB/randgen" --depth=1 --branch=$(RQG_BRANCH) $(RQG_HOME)
      mkdir $(LOGDIR)
      mv $(BASEDIR)/server.version $(LOGDIR)/versions
      cd $(RQG_HOME)
      echo "randgen:" $(RQG_BRANCH) `git log -1 --pretty="%h"` >> $(LOGDIR)/versions
      cd $(TOOLBOX_DIR)
      echo "mariadb-toolbox:" $(TOOLBOX_BRANCH) `git log -1 --pretty="%h"` >> $(LOGDIR)/versions
    displayName: 'Clone tools and get versions'

  - script: |
      set -xo pipefail
      cd $(RQG_HOME)
      perl ./runall-new.pl --basedir=$(BASEDIR) --vardir=$(LOGDIR)/vardir $(GLOBAL_RQG_OPTIONS) $(JOB_RQG_OPTIONS) --grammar=$(GRAMMAR) $(GLOBAL_MYSQLD_OPTIONS) $(JOB_MYSQLD_OPTIONS) 2>&1 | tee $(LOGDIR)/trial.log
    displayName: 'Run test'

  - script: |
      for f in $(LOGDIR)/versions $(LOGDIR)/vardir/mysql.err $(LOGDIR)/vardir/boot.log ; do \
        echo "######################################" \
        cat $f \
      done
    displayName: 'Collect failure info'
    condition: failed()
