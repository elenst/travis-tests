variables:

  # Branches
  SERVER_BRANCH: 10.4
  RQG_BRANCH: elenst-dev
  TOOLBOX_BRANCH: master

  # Build/run variations
  RERUN_OLD_SERVER: yes

  # Locations
  TOOLBOX_DIR: $(HOME)/mariadb-toolbox
  RQG_HOME: $(HOME)/rqg
  SCRIPT_DIR: $(TOOLBOX_DIR)/travis
  BASEDIR: $(HOME)/server
  LOGDIR: $(HOME)/logs
  SRCDIR: $(HOME)/src

  # Build options
  GLOBAL_CMAKE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_SPHINX=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DPLUGIN_ROCKSDB=NO -DWITH_MARIABACKUP=OFF"
  JOB_CMAKE_OPTIONS: ""
  TEST_CMAKE_OPTIONS: ""

  # Test options
  TEST_DURATION: 350
  GLOBAL_RQG_OPTIONS: "--duration=$(TEST_DURATION) --threads=6 --seed=time --reporters=Backtrace,ErrorLog,Deadlock --validators=TransformerNoComparator --views --redefine=conf/mariadb/alter_table.yy --redefine=conf/mariadb/instant_add.yy --redefine=conf/mariadb/modules/alter_table_columns.yy --redefine=conf/mariadb/sp.yy --redefine=conf/mariadb/bulk_insert.yy  --redefine=conf/mariadb/modules/admin.yy --redefine=conf/mariadb/modules/userstat.yy --redefine=conf/mariadb/modules/foreign_keys.yy -redefine=conf/mariadb/modules/locks.yy --redefine=conf/mariadb/modules/sql_mode.yy --redefine=conf/mariadb/modules/acl.yy --redefine=conf/mariadb/versioning.yy --redefine=conf/mariadb/sequences.yy --redefine=conf/mariadb/modules/locks-10.4-extra.yy --mysqld=--log_output=FILE --mysqld=--max-statement-time=30 --mysqld=--lock-wait-timeout=10 --mysqld=--loose-innodb-lock-wait-timeout=5 --mysqld=--loose-debug_assert_on_not_freed_memory=0"
  JOB_RQG_OPTIONS: ""
  TEST_RQG_OPTIONS: ""

jobs:

#########
- job: Clone_and_build
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    parallel: 1

  # Libraries needed to build the server
  steps:
  - script: |
      set -x
      sudo apt-get update
      sudo apt-get install -y -q \
        apt-utils build-essential cmake python-dev sudo git \
        devscripts equivs libcurl4-openssl-dev \
        ccache python3 python3-pip curl libssl-dev libzstd-dev \
        libevent-dev dpatch gawk gdb libboost-dev libcrack2-dev \
        libjudy-dev libnuma-dev libsnappy-dev libxml2-dev \
        unixodbc-dev uuid-dev fakeroot iputils-ping \
        libncurses5-dev libbison-dev
    displayName: 'Install packages for build'
      
  # Clone server and tools
  - script: |
      set -x
      mkdir $(LOGDIR)
      git clone "https://github.com/elenst/mariadb-toolbox" --depth=1 --branch=$(TOOLBOX_BRANCH) $(TOOLBOX_DIR)
      git clone "https://github.com/MariaDB/randgen" --depth=1 --branch=$(RQG_BRANCH) $(RQG_HOME)
      git clone "https://github.com/MariaDB/server" --depth=1 --branch=$(SERVER_BRANCH) $(SRCDIR)
      cd $(TOOLBOX_DIR)
      chmod u+x $(SCRIPT_DIR)/*
      echo $(TOOLBOX_BRANCH) `git log -1 --pretty="%h"` > $(LOGDIR)/toolbox.version
      cd $(RQG_HOME)
      echo $(RQG_BRANCH) `git log -1 --pretty="%h"` > $(LOGDIR)/rqg.version
      cd $(SRCDIR)
      echo $(SERVER_BRANCH) `git log -1 --pretty="%h"` > $(LOGDIR)/server.version
      ls -l $(SCRIPT_DIR)/*
    displayName: 'Clone server and tools'

  # Build server
  - script: |
      set -x
      mkdir $(BASEDIR)
      mkdir $(HOME)/out-of-source
      cd $(HOME)/out-of-source
      cmake $(SRCDIR) $(GLOBAL_CMAKE_OPTIONS) $(JOB_CMAKE_OPTIONS) $(TEST_CMAKE_OPTIONS) -DCMAKE_INSTALL_PREFIX=$(BASEDIR)
      make -j4
      make install
    displayName: 'Build server'

  # Store cloned tools and built binaries
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(BASEDIR)
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/build.tar.gz
    displayName: 'Archive build'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(BASEDIR)
      artifactName: 'build'
    displayName: 'Store build'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(TOOLBOX_DIR)
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/toolbox.tar.gz
    displayName: 'Archive toolbox'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(RQG_HOME)
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/rqg.tar.gz
    displayName: 'Archive RQG'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: 'tools'
    displayName: 'Store tools'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: '$(LOGDIR)'
      artifactName: 'logs'
    displayName: 'Store logdir'

#########
- job: Run_tests
  dependsOn: Clone_and_build
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      metadata_stability:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/metadata_stability.yy --gendata=conf/runtime/metadata_stability.zz"
      performance_schema:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/performance_schema.yy --mysqld=--performance-schema"
      information_schema:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/information_schema.yy"

  steps:
  # Restore cloned tools and built binaries
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Restore build'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'tools'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Restore tools'
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'tools'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Restore tools'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/build.tar.gz'
      destinationFolder: $(BASEDIR)
    displayName: 'Extract build'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/toolbox.tar.gz'
      destinationFolder: $(TOOLBOX_DIR)
    displayName: 'Extract toolbox'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/rqg.tar.gz'
      destinationFolder: $(RQG_HOME)
    displayName: 'Extract RQG'

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'logs'
      targetPath: $(LOGDIR)
    displayName: 'Restore logdir'

  - script: |
      set -x
      sudo apt-get update
      sudo apt-get install -y -q libdbi-perl libdbd-mysql-perl libsnappy1
    displayName: 'Install runtime packages'

  - script: |
      set -xo pipefail
      cd $(RQG_HOME)
      perl ./runall-new.pl --basedir=$(BASEDIR) --vardir=$(LOGDIR)/vardir $(GLOBAL_RQG_OPTIONS) $(JOB_RQG_OPTIONS) $(TEST_RQG_OPTIONS) 2>&1 | tee $(LOGDIR)/trial.log
#      . $(SCRIPT_DIR)/collect_single_failure_info.sh
    displayName: 'Run test'

  - script: |
      set -xo pipefail
      cat $(LOGDIR)/vardir/boot.log
      cat $(LOGDIR)/vardir/mysql.err
    displayName: 'Collect failure info'
    condition: failed()

