variables:
  # Branches
  SERVER_BRANCH: 10.4
  RQG_BRANCH: elenst-dev
  TOOLBOX_BRANCH: ""

  # Build/run variations
  RERUN_OLD_SERVER: yes

  # Locations
  TOOLBOX_DIR: $(HOME)/mariadb-toolbox
  SCRIPT_DIR: $(TOOLBOX_DIR)/travis
  BASEDIR: $(HOME)/server

  # Build options
  GLOBAL_CMAKE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_SPHINX=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DPLUGIN_ROCKSDB=NO -DWITH_MARIABACKUP=OFF"

  # Test options
  TEST_DURATION: 350
  GLOBAL_RQG_OPTIONS: "--duration=$(TEST_DURATION) --threads=6 --seed=time --reporters=Backtrace,ErrorLog,Deadlock --validators=TransformerNoComparator --views --redefine=conf/mariadb/alter_table.yy --redefine=conf/mariadb/instant_add.yy --redefine=conf/mariadb/modules/alter_table_columns.yy --redefine=conf/mariadb/sp.yy --redefine=conf/mariadb/bulk_insert.yy  --redefine=conf/mariadb/modules/admin.yy --redefine=conf/mariadb/modules/userstat.yy --redefine=conf/mariadb/modules/foreign_keys.yy -redefine=conf/mariadb/modules/locks.yy --redefine=conf/mariadb/modules/sql_mode.yy --redefine=conf/mariadb/modules/acl.yy --redefine=conf/mariadb/versioning.yy --redefine=conf/mariadb/sequences.yy --redefine=conf/mariadb/modules/locks-10.4-extra.yy --mysqld=--log_output=FILE --mysqld=--max-statement-time=30 --mysqld=--lock-wait-timeout=10 --mysqld=--loose-innodb-lock-wait-timeout=5 --mysqld=--loose-debug_assert_on_not_freed_memory=0"

jobs:

#########
- job: Clone_and_build
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    parallel: 1

  # Libraries needed to build the server
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y -q \
        apt-utils build-essential cmake python-dev sudo git \
        devscripts equivs libcurl4-openssl-dev \
        ccache python3 python3-pip curl libssl-dev libzstd-dev \
        libevent-dev dpatch gawk gdb libboost-dev libcrack2-dev \
        libjudy-dev libnuma-dev libsnappy-dev libxml2-dev \
        unixodbc-dev uuid-dev fakeroot iputils-ping \
        libncurses5-dev libbison-dev
    displayName: 'Install libraries'
      
  # Clone, cmake, make, make install
  - script: |
      git clone "https://github.com/elenst/mariadb-toolbox" --depth=1 $(TOOLBOX_BRANCH) $(TOOLBOX_DIR)
      chmod u+x $(SCRIPT_DIR)/*
      SCRIPT_DIR=`echo $(SCRIPT_DIR)`
      TOOLBOX_DIR=`echo $(TOOLBOX_DIR)`
      travis_terminate() { exit 1; }
      . $(SCRIPT_DIR)/setup_environment.sh
      . $(SCRIPT_DIR)/clone_server.sh
###      . $(SCRIPT_DIR)/build_if_not_cached.sh
    displayName: 'Clone and build'

  # Store cloned tools and built binaries
###  - task: PublishPipelineArtifact@0
###    inputs:
###      pathToPublish: $(BASEDIR)
###      artifactName: 'build'
###    displayName: 'Store build'
#  - task: PublishBuildArtifacts@1
#    inputs:
#      pathToPublish: $(BASEDIR)
#      artifactName: $(SERVER_BRANCH)
#    displayName: 'Publish build'
  - script: ls -l $(TOOLBOX_DIR)/ $(RQG_HOME)/
  - task: PublishPipelineArtifact@0
    inputs:
      pathToPublish: $(TOOLBOX_DIR)
      artifactName: 'toolbox'
    displayName: 'Store toolbox'
  - task: PublishPipelineArtifact@0
    inputs:
      pathToPublish: $(RQG_HOME)
      artifactName: 'rqg'
    displayName: 'Store RQG'

#########
- job: Run_tests
  dependsOn: Clone_and_build
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      metadata_stability:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/metadata_stability.yy --gendata=conf/runtime/metadata_stability.zz"
      performance_schema:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/performance_schema.yy --mysqld=--performance-schema"
      information_schema:
        JOB_RQG_OPTIONS: "--grammar=conf/runtime/information_schema.yy"

  steps:
  # Restore cloned tools and built binaries
###  - task: DownloadPipelineArtifact@0
###    inputs:
###      artifactName: 'build'
###      targetPath: $(BASEDIR)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'rqg'
      targetPath: $(RQG_HOME)
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'toolbox'
      targetPath: $(TOOLBOX_DIR)

  # Run the tests
  - script: $(SCRIPT_DIR)/run_single_test.sh
    displayName: 'Test run'
    
