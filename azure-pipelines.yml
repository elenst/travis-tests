variables:

  # Branches (these values can be overridden: defaultServerBranch by serverBranch etc.
  defaultServerBranch: 10.4
  defaultRqgBranch: elenst-dev
  toolboxBranch: master

  # Locations
  TOOLBOX_DIR: $(HOME)/mariadb-toolbox
  RQG_HOME: $(HOME)/rqg
  SCRIPT_DIR: $(TOOLBOX_DIR)/travis
  BASEDIR: $(HOME)/server
  LOGDIR: $(HOME)/logs
  SRCDIR: $(HOME)/src

  # Global build options (can be overridden by cmakeOptions; jobCmakeOptions are added at the end of the resulting line)
  defaultCmakeOptions: "-DCMAKE_BUILD_TYPE=Debug -DPLUGIN_SPHINX=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DPLUGIN_ROCKSDB=NO -DWITH_MARIABACKUP=OFF"

  # Global test options (can be overridden: defaultTestDuration by testDuration etc.; jobRqgOptions etc. are added at the end of the resulting line)
  defaultTestDuration: 400
  defaultRqgOptions: "--threads=6 --seed=time --reporters=Backtrace,ErrorLog,Deadlock --views --redefine=conf/mariadb/alter_table.yy --redefine=conf/mariadb/instant_add.yy --redefine=conf/mariadb/modules/alter_table_columns.yy --redefine=conf/mariadb/sp.yy --redefine=conf/mariadb/bulk_insert.yy  --redefine=conf/mariadb/modules/admin.yy --redefine=conf/mariadb/modules/userstat.yy --redefine=conf/mariadb/modules/foreign_keys.yy -redefine=conf/mariadb/modules/locks.yy --redefine=conf/mariadb/modules/sql_mode.yy --redefine=conf/mariadb/modules/acl.yy --redefine=conf/mariadb/versioning.yy --redefine=conf/mariadb/sequences.yy --redefine=conf/mariadb/modules/locks-10.4-extra.yy --filter=$(SCRIPT_DIR)/10.4-combo-filter.ff"
  defaultMysqldOptions: "--mysqld=--log_output=FILE --mysqld=--loose-max-statement-time=20 --mysqld=--lock-wait-timeout=10 --mysqld=--loose-innodb-lock-wait-timeout=5 --mysqld=--loose-debug_assert_on_not_freed_memory=0"

  # JOB options can be defined later
  jobCmakeOptions: ""
  jobRqgOptions: ""
  jobMysqldOptions: ""

jobs:

#########
- job: Set_vars
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    parallel: 1
  steps:
    - script: |
        server_branch=${SERVERBRANCH-$DEFAULTSERVERBRANCH}
        rqg_branch=${RQGBRANCH-$DEFAULTRQGBRANCH}
        toolbox_branch=${TOOLBOXBRANCH-$DEFAULTTOOLBOXBRANCH}
        cmake_options=${CMAKEOPTIONS-$DEFAULTCMAKEOPTIONS}
        test_duration=${TESTDURATION-$DEFAULTTESTDURATION}
        rqg_options=${RQGOPTIONS-$DEFAULTRQGOPTIONS}
        mysqld_options=${MYSQLDOPTIONS-$DEFAULTMYSQLDOPTIONS}
        echo "##vso[task.setvariable variable=serverBranch;isOutput=true]$server_branch"
        echo "##vso[task.setvariable variable=rqgBranch;isOutput=true]$rqg_branch"
        echo "##vso[task.setvariable variable=toolboxBranch;isOutput=true]$toolbox_branch"
        echo "##vso[task.setvariable variable=cmakeOptions;isOutput=true]$cmake_options"
        echo "##vso[task.setvariable variable=testDuration;isOutput=true]$test_duration"
        echo "##vso[task.setvariable variable=rqgOptions;isOutput=true]$rqg_options"
        echo "##vso[task.setvariable variable=mysqldOptions;isOutput=true]$mysqld_options"
      name: setvars

#########
- job: Prepare_server
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    parallel: 1
  dependsOn: Set_vars
  condition: succeeded()
  variables:
    serverBranch: $[ dependencies.Set_vars.outputs['setvars.serverBranch' ] ]
    cmakeOptions: $[ dependencies.Set_vars.outputs['setvars.cmakeOptions' ] ]

  steps:

  # Check if the server has already been built and stored
  - script: |
      remote_revision=`wget -O - https://github.com/MariaDB/server/tree/10.3 | grep -A 2 "Latest commit$" | tail -n 1 | sed -e 's/ //g'`
      echo "Remote revision: $remote_revision"
      wget -O - https://github.com/MariaDB/server/tree/10.3 | grep -A 2 "Latest commit$"
      echo '##vso[task.setvariable variable=isOldBuild;isOutput=true]false'
      if wget ftp://ftp.askmonty.org/private/azure/build-$(serverBranch)-$remote_revision.tar.gz ; then mv build-$(serverBranch)-$remote_revision.tar.gz build.tar.gz ; echo '##vso[task.setvariable variable=isOldBuild;isOutput=true]true' ; fi
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: 'Check if the binaries exist'
    name: get_binaries

  # Install libraries and build the server
  - script: |
      sudo apt-get update
      sudo apt-get install -y -q \
        apt-utils build-essential cmake python-dev sudo git \
        devscripts equivs libcurl4-openssl-dev \
        ccache python3 python3-pip curl libssl-dev libzstd-dev \
        libevent-dev dpatch gawk gdb libboost-dev libcrack2-dev \
        libjudy-dev libnuma-dev libsnappy-dev libxml2-dev \
        unixodbc-dev uuid-dev fakeroot iputils-ping \
        libncurses5-dev libbison-dev
      git clone "https://github.com/MariaDB/server" --depth=1 --branch=$(serverBranch) $(SRCDIR)
      mkdir $(BASEDIR)
      mkdir $(HOME)/out-of-source
      cd $(HOME)/out-of-source
      cmake $(SRCDIR) $(cmakeOptions) $(jobCmakeOptions) -DCMAKE_INSTALL_PREFIX=$(BASEDIR)
      make -j4
      make install
      cd $(SRCDIR)
      rev=`git log -1 --pretty="%h"`
      echo "Revision: $rev"
      git log -1 --pretty="%h"
      echo "##vso[task.setvariable variable=serverRevision;isOutput=true]$rev"
      echo $(serverBranch) $rev > $(BASEDIR)/server.version
      echo '##vso[task.setvariable variable=isOldBuild;isOutput=true]false'
    condition: and(succeeded(), eq(variables['get_binaries.isOldBuild'], 'false'))
    displayName: 'Build server'
    name: build_server

  # Archive and store built binaries
  - task: ArchiveFiles@2
    condition: and(succeeded(), eq(variables['build_server.isOldBuild'], 'false'))
    inputs:
      rootFolderOrFile: $(BASEDIR)
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/build-$(serverBranch)-$(build_server.serverRevision).tar.gz
    displayName: 'Archive build'

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)
      artifactName: 'build'
    displayName: 'Store build'

#########
- job: Publish_binaries
  dependsOn: Prepare_server
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Download build'

  - task: FtpUpload@1
    inputs:
      credentialsOption: 'inputs'
      serverUrl: 'ftp://ftp.askmonty.org'
      username: 'anonymous'
      password: 'foo'
      rootDirectory: '$(Build.ArtifactStagingDirectory)'
      remoteDirectory: '/private/azure/'
    displayName: 'Upload build'

#########
- job: Test
  dependsOn:
  - Set_vars
  - Prepare_server
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    serverBranch: $[ dependencies.Set_vars.outputs['setvars.serverBranch' ] ]
    rqgBranch: $[ dependencies.Set_vars.outputs['setvars.rqgBranch' ] ]
    toolboxBranch: $[ dependencies.Set_vars.outputs['setvars.toolboxBranch' ] ]
    testDuration: $[ dependencies.Set_vars.outputs['setvars.testDuration' ] ]
    rqgOptions: $[ dependencies.Set_vars.outputs['setvars.rqgOptions' ] ]
    mysqldOptions: $[ dependencies.Set_vars.outputs['setvars.mysqldOptions' ] ]

    serverRevision: $[ dependencies.Prepare_server.outputs['build_server.serverRevision' ] ]

  strategy:
    matrix:
      'metadata_stability':
        GRAMMAR: 'conf/runtime/metadata_stability.yy'
        jobRqgOptions: "--gendata=conf/runtime/metadata_stability.zz"
        jobMysqldOptions: ""
      'performance_schema':
        GRAMMAR: 'conf/runtime/performance_schema.yy'
        jobMysqldOptions: "--mysqld=--performance-schema"
      'information_schema':
        GRAMMAR: 'conf/runtime/information_schema.yy'
        jobRqgOptions: ""
        jobMysqldOptions: ""
      'many_indexes-InnoDB':
        GRAMMAR: 'conf/engines/many_indexes.yy'
        jobRqgOptions: "--gendata=conf/engines/many_indexes.zz --engine=InnoDB"
      'many_indexes-Aria':
        GRAMMAR: 'conf/engines/many_indexes.yy'
        jobRqgOptions: "--gendata=conf/engines/many_indexes.zz --engine=Aria"
        jobMysqldOptions: ""
      'engine_stress-InnoDB':
        GRAMMAR: 'conf/engines/engine_stress.yy'
        jobRqgOptions: "--gendata=conf/engines/engine_stress.zz --engine=InnoDB"
        jobMysqldOptions: ""
      'engine_stress-Aria':
        GRAMMAR: 'conf/engines/engine_stress.yy'
        jobRqgOptions: "--gendata=conf/engines/engine_stress.zz --engine=Aria"
        jobMysqldOptions: ""

  steps:

  - script: printenv
    displayName: env

  # Restore pre-built binaries
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'build'
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Download build'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/build-$(serverBranch)-$(serverRevision).tar.gz'
      destinationFolder: $(BASEDIR)
    displayName: 'Extract build'

  - script: |
      set -x
      sudo apt-get update
      sudo apt-get install -y -q libdbi-perl libdbd-mysql-perl libsnappy1v5 gdb
    displayName: 'Install runtime packages'

  - script: |
      set -x
      echo "Agent.JobName: " $(Agent.JobName)
      git clone "https://github.com/elenst/mariadb-toolbox" --depth=1 --branch=$(toolboxBranch) $(TOOLBOX_DIR)
      git clone "https://github.com/MariaDB/randgen" --depth=1 --branch=$(rqgBranch) $(RQG_HOME)
      mkdir $(LOGDIR)
      mv $(BASEDIR)/server.version $(LOGDIR)/versions
      cd $(RQG_HOME)
      rqg_rev=`git log -1 --pretty="%h"`
      cd $(TOOLBOX_DIR)
      echo "$(rqgBranch) $rqg_rev mariadb-toolbox:" $(toolboxBranch) `git log -1 --pretty="%h"` >> $(LOGDIR)/versions
    displayName: 'Clone tools and get versions'

  - script: |
      set -xo pipefail
      cd $(RQG_HOME)
      perl ./runall-new.pl \
        --basedir=$(BASEDIR) \
        --vardir=$(LOGDIR)/vardir \
        --duration=$(testDuration) \
        $(rqgOptions) $(jobRqgOptions) \
        --grammar=$(GRAMMAR) \
        $(mysqldOptions) $(jobMysqldOptions) \
        2>&1 | tee $(LOGDIR)/trial.log
    displayName: 'Run test'

  - script: |
      result_summary_dir=$(Build.ArtifactStagingDirectory)/result_summary.$(Agent.jobName)
      result_details_dir=$(Build.ArtifactStagingDirectory)/logs.$(Agent.jobName)
      mkdir $result_summary_dir
      mkdir $result_details_dir
      cp $(LOGDIR)/trial.log $result_summary_dir/
      cp $(LOGDIR)/versions $result_summary_dir/
      cp `find $(LOGDIR) -name mysql*err* | xargs` $result_summary_dir/ || true
      cp `find $(LOGDIR) -name mbackup*log* | xargs` $result_summary_dir/
      cp $(LOGDIR)/vardir/mysql.log $result_details_dir/
      for c in `find $(LOGDIR) -name core*` ; do \
        echo "#################### $c ####################" >> $result_summary_dir/stacktraces ; \
        echo "#################### $c ####################" >> $(LOGDIR)/threads ; \
        echo "#################### $c ####################" >> $(LOGDIR)/threads_full ; \
        binary=`gdb --batch --eval-command="bt" 1 $c 2>&1 | grep 'Core was generated by' | sed -e 's/^Core was generated by \`\([^ ]*\) .*/\1/'` ; \
        echo $binary >> $result_summary_dir/stacktraces ; \
        echo $binary >> $(LOGDIR)/threads ; \
        echo $binary >> $(LOGDIR)/threads_full ; \
        gdb --batch --eval-command="bt" $binary $c  | grep -v 'New LWP' >> $result_summary_dir/stacktraces ; \
        gdb --batch --eval-command="thread apply all bt" $binary $c >> $(LOGDIR)/threads ; \
        gdb --batch --eval-command="thread apply all bt full" $binary $c >> $(LOGDIR)/threads_full; \
      done
      mv $(LOGDIR) $result_details_dir/data-$(Build.BuildNumber)-$(Agent.jobName)
    displayName: 'Collect failure info'
    condition: always()

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/result_summary.$(Agent.jobName)
      artifactName: summary-$(Agent.jobName)
    displayName: 'Store test result summary'
    condition: always()

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.ArtifactStagingDirectory)/logs.$(Agent.jobName)
      includeRootFolder: true
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile:  $(Build.ArtifactStagingDirectory)/data-$(Build.BuildNumber)-$(Agent.jobName).tar.gz
    displayName: 'Archive test data'
    condition: failed()

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/logs.$(Agent.jobName)
      artifactName: data-$(Agent.jobName)
    displayName: 'Store test data'
    condition: failed()


#########
- job: Result_summary
  dependsOn: Test
  condition: always()
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:

  # Restore pre-built binaries
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: "summary-*"
      targetPath: $(Build.ArtifactStagingDirectory)
    displayName: 'Download test result summaries'

  - script: |
      for d in $(Build.ArtifactStagingDirectory)/* ; do \
        echo "################## $d ##################" ; \
        grep 'exited with exit status' $d/trial.log ; \
        echo ; \
        grep -A 1 'Final command line' $d/trial.log ; \
        echo ; \
        cat $d/versions ; \
        echo ; \
        perl $(SCRIPT_DIR)/check_for_known_bugs.pl $d/mysql*.err* $d/stacktraces $d/trial.log \
        echo ; \
        for f in $d/mysql*.err* ; do echo "################## $f ##################" ; cat $f | grep -v -f $(SCRIPT_DIR)/server_warnings.supp | grep -v "\[Note\]" | grep -v "^$" | cut -c 1-4096 ; done ; \
        echo "###########################################################" ; \
      done
    displayName: 'Print summary'
    condition: always()

